// Generated by gencpp from file navplay/imu.msg
// DO NOT EDIT!


#ifndef NAVPLAY_MESSAGE_IMU_H
#define NAVPLAY_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navplay
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : gpst(0.0)
    , acce()
    , gyro()  {
      acce.assign(0.0);

      gyro.assign(0.0);
  }
  imu_(const ContainerAllocator& _alloc)
    : gpst(0.0)
    , acce()
    , gyro()  {
  (void)_alloc;
      acce.assign(0.0);

      gyro.assign(0.0);
  }



   typedef double _gpst_type;
  _gpst_type gpst;

   typedef boost::array<double, 3>  _acce_type;
  _acce_type acce;

   typedef boost::array<double, 3>  _gyro_type;
  _gyro_type gyro;





  typedef boost::shared_ptr< ::navplay::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navplay::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::navplay::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::navplay::imu > imuPtr;
typedef boost::shared_ptr< ::navplay::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navplay::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navplay::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navplay::imu_<ContainerAllocator1> & lhs, const ::navplay::imu_<ContainerAllocator2> & rhs)
{
  return lhs.gpst == rhs.gpst &&
    lhs.acce == rhs.acce &&
    lhs.gyro == rhs.gyro;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navplay::imu_<ContainerAllocator1> & lhs, const ::navplay::imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navplay

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navplay::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navplay::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navplay::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navplay::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navplay::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navplay::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navplay::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08a3930f07de2d670d1b2b4f3b2dd41c";
  }

  static const char* value(const ::navplay::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08a3930f07de2d67ULL;
  static const uint64_t static_value2 = 0x0d1b2b4f3b2dd41cULL;
};

template<class ContainerAllocator>
struct DataType< ::navplay::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navplay/imu";
  }

  static const char* value(const ::navplay::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navplay::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gpst\n"
"float64[3] acce\n"
"float64[3] gyro\n"
;
  }

  static const char* value(const ::navplay::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navplay::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gpst);
      stream.next(m.acce);
      stream.next(m.gyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navplay::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navplay::imu_<ContainerAllocator>& v)
  {
    s << indent << "gpst: ";
    Printer<double>::stream(s, indent + "  ", v.gpst);
    s << indent << "acce[]" << std::endl;
    for (size_t i = 0; i < v.acce.size(); ++i)
    {
      s << indent << "  acce[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acce[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVPLAY_MESSAGE_IMU_H
